# Copyright (c) Kopexa GmbH
# SPDX-License-Identifier: BUSL-1.1

version: "3"

vars:
  GO_FUMPT: go tool mvdan.cc/gofumpt
  GO_TEST: go tool gotest.tools/gotestsum --format pkgname
  GO_COPYWRITE: go tool github.com/hashicorp/copywrite

tasks:
  default:
    silent: true
    cmds:
      - task --list

  version:
    desc: Show the version of the project
    vars:
      LATEST_VERSION_TAG:
        sh: git describe --abbrev=0 --tags 2>/dev/null || echo "v0.0.0"
      MANIFEST_VERSION:
        sh: git describe --abbrev=0 --tags 2>/dev/null || echo "v0.0.0"
      VERSION:
        sh: echo "$(git describe --abbrev=0 --tags 2>/dev/null || echo 'v0.0.0')+$(git rev-list --count HEAD)"
    cmds:
      - |
        echo "Latest Version Tag: {{.LATEST_VERSION_TAG}}"
      - |
        echo "Manifest Version: {{.MANIFEST_VERSION}}"
      - |
        echo "Version: {{.VERSION}}"

  init:
    desc: Initialize the project
    cmds:
     - task: prep

  prep:
    desc: Prepare the project
    cmds:
      - task: prep:tools
      - lefthook install

  lefthook:install:
    desc: Install Lefthook hooks
    cmds:
      - lefthook install

  prep:tools:
    desc: Prepare tools for the project
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
      - go install github.com/evilmartians/lefthook@latest
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest # Ensure protoc-gen-go is installed
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest # Ensure protoc-gen-go-grpc is installed
      - go install github.com/planetscale/vtprotobuf/cmd/protoc-gen-go-vtproto@latest # Ensure protoc-gen-go-vtproto is installed

  prep:tools:protolint:
    desc: Install Protolint
    cmds:
       - go install github.com/yoheimuta/protolint/cmd/protolint@latest

  clean:proto:
    desc: Clean up generated proto files
    cmds:
      - find . -not -path './.*' \( -name '*.ranger.go' -or -name '*.pb.go' -or -name '*.actions.go' -or -name '*-packr.go' -or -name '*.swagger.json' \) -delete

  gen:
    desc: Generate code for the project
    cmds:
      - task: gen:vault

  gen:vault:
    desc: Generate SDK code
    cmds:
      - go generate ./vault

  license:check:
    desc: Check license headers in source files
    cmds:
      - "{{.GO_COPYWRITE}} headers --plan"

  license:fix:
    desc: Fix license headers in source files
    cmds:
      - "{{.GO_COPYWRITE}} headers"

  lint:
    desc: Run linters on the project
    cmds:
      - golangci-lint run --config .golangci.yaml

  fmt:
    desc: Format the codebase
    cmds:
      - "{{.GO_FUMPT}} -w ."

  fmt:fix:
    desc: Fix formatting issues
    cmds:
      - "{{.GO_FUMPT}} -d ."

  test:unit:
    desc: Run unit tests
    cmds:
      - mkdir -p build/reports
      - "{{.GO_TEST}} --junitfile build/reports/test-unit.xml -- -race ./... -count=1 -short -cover -coverprofile build/reports/unit-test-coverage.out"